<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:ws="http://jax-ws.dev.java.net/spring/core" xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
	http://jax-ws.dev.java.net/spring/core http://jax-ws.dev.java.net/spring/core.xsd http://jax-ws.dev.java.net/spring/servlet http://jax-ws.dev.java.net/spring/servlet.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
	http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd
	">
	<!-- 数据库配置 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:comp/env/test" /> </bean> -->
	<mvc:annotation-driven />
	<!-- Jedis ConnectionFactory -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
		<property name="maxActive" value="2000" />
		<property name="maxIdle" value="100" />
		<property name="maxWait" value="3000" />
		<property name="testOnBorrow" value="true" />
	</bean>
	<!-- If redis have password you can add property p:password = "password" -->
	<bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy"
		p:host-name="10.6.1.136" p:port="6379" p:poolConfig-ref="jedisPoolConfig" p:database="3" />
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="redisConnectionFactory">
	</bean>
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="redisConnectionFactory">
	</bean>
	
	<!-- the default ConnectionFactory -->
   <redis:listener-container>
    <!-- the method attribute can be skipped as the default method name is "handleMessage" -->
    <redis:listener ref="listener" method="handleMessage" topic="chatroom" />
   </redis:listener-container>
  
   <bean id="listener" class="com.jedisui.bean.DefaultMessageDelegate"/>
	
	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="messageListener" class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
	    <constructor-arg>
	        <bean class="com.jedisui.bean.DefaultMessageDelegate"/>
	    </constructor-arg>
	</bean>
	
	<!-- and this is the message listener container... -->
	<bean id="redisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
	    <property name="connectionFactory" ref="redisConnectionFactory"/>
	    <property name="messageListeners">
	      <!-- map of listeners and their associated topics (channels or/and patterns) -->
	      <map>
	        <entry key-ref="messageListener">
	            <bean class="org.springframework.data.redis.listener.ChannelTopic">
	               <constructor-arg value="chatroom"/>
	            </bean>
	        </entry>
	      </map>
	    </property>
	</bean>
	
	<!-- Spring RMI Server 配置 -->
	<!-- <bean class="org.springframework.remoting.rmi.RmiServiceExporter"> 
		does not necessarily have to be the same name as the bean to be exported 
		<property name="serviceName" value="SportService" /> <property name="service" 
		ref="sportService" /> <property name="serviceInterface" value="com.yystar.mapping.rmi.shared.SportService" 
		/> <property name="registryPort" value="1199" /> </bean> -->
</beans>